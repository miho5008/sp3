@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}
@{
    WebSecurity.RequireAuthenticatedUser();
    if(!Roles.GetRolesForUser(WebSecurity.CurrentUserId.ToString()).Contains("employee")){
        Response.Redirect("~/");
    }
    WebSecurity.RequireRoles("employee");
    
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Employee Page";

    String forminput_childpnr = Request["regval_childpnr"];
    String forminput_stopdate = Request["regval_stopdate"];
    // pattern: YYYY/MM/DD
    String regexPattern_date = "2[0-9]{3}/(0[1-9]|1[0-2])/([0-2][0-9]|3[0-1])";
    // pattern: YYYYMMDDXXXX
    //String regexPattern_pnr = "(19|20)[0-9]{2}(0[1-9]([0-2][0-9]|3[0-1])|1[0-2]([0-2][0-9]|3[0-1]))[0-9]{4}";
    String regexPattern_pnr = "(((19|20)([0-9]{2})(01|03|05|07|08|10|12)((0[1-9)])|(1[0-9])|(2[0-9])|(3[0-1]))([0-9]{4}))|((19|20)(04|06|09|11)((0[1-9)])|(1[0-9])|(2[0-9])|(30))([0-9]{4}))|((19|20)(02)((0[1-9)])|(1[0-9])|(2[0-8]))([0-9]{4})))";

}

@{
    // registration submission
    if(IsPost){
        
        switch(Request["regsubmit"]){
            case "self":
                String stopdate = Request["regval_stopdate"];
                
                // validate input
                if(System.Text.RegularExpressions.Regex.IsMatch(stopdate, regexPattern_date)){
                    <p>registration successful</p>

                    Database.Open("sp3").Query(
                        "INSERT INTO registrations"
                        +" (userid, ipaddress, action, time, stoptime)"
                        +" VALUES"
                        +" (@0, @1, 2, (@2), (@3))", 
                        new String[]{
                            WebSecurity.CurrentUserId.ToString(),
                            Request.UserHostAddress.ToString(),
                            DateTime.Now.ToString(),
                            stopdate}
                    );
                    
                    var db = Database.Open("sp3");

                    @Display.Employee(WebSecurity.CurrentUserId.ToString())

                } else {
                    // input was incorrect
                    <p class="error">Invalid input, could not register<br>use format YYYY/MM/DD</p>
                }
                break;
            case "child":
                String childpnr = Request["regval_childpnr"];

                // validate input
                if(System.Text.RegularExpressions.Regex.IsMatch(childpnr, regexPattern_pnr)){
                    Database.Open("sp3").Query(
                        "INSERT INTO registrations"
                        +" (userid, ipaddress, action, time, childpnr)"
                        +" VALUES"
                        +" (@0, @1, 1, (@2), (@3))", 
                        new String[]{
                            WebSecurity.CurrentUserId.ToString(),
                            Request.UserHostAddress.ToString(),
                            DateTime.Now.ToString(),
                            childpnr});

                    <p>registration successful</p>
                    @Display.Employee(WebSecurity.CurrentUserId.ToString())

                } else {
                    // input was incorrect
                    <p class="error">Invalid input, could not register</p>
                }
                
                break;
        }
    } 
}

<div>
    <h1>employee page</h1>
    @{
        // setup input validations
        Validation.RequireField("regval_childnr", "You must specify a value.");
        Validation.Add("regval_childnr",
            Validator.Regex("[0-9]+",
            errorMessage: "Input must be integers"));
        Validation.Add("regval_childnr",
            Validator.Range(0, 201703129999,
            errorMessage: "Input must be a valid pnr"));

        Validation.RequireField("regval_stopdate", "You must specify a date");
        Validation.Add("regval_stopdate",
            Validator.Regex(regexPattern_date,
            errorMessage:"Input must be format YYYY/MM/DD"));

        // forms
        switch(Request["regtype"]){
            case "self":
                if(forminput_stopdate.IsEmpty()){
                    forminput_stopdate = DateTime.Today.ToString("yyyy/MM/dd", System.Globalization.CultureInfo.InvariantCulture);
                }
                <h2>register non-attendance</h2>
                <form id="register_self" method="post">
                    <label for="datepicker">date - (YYYY/MM/DD)</label>
                    <input type="text" id="datepicker" name="regval_stopdate"
                           value="@forminput_stopdate"
                           readonly="true"
                            @Validation.For("regval_stopdate") />
                    <button name="regsubmit" value="self">register</button>
                     @Html.ValidationMessage("regval_stopdate")
                </form>    
                break;
            case "child":
                <h2>register non-attendance due to sick child</h2>
                <form id="register_child" method="post">
                    <label for="input_childpnr" @if (!ModelState.IsValidField("regval_childpnr")) 
                        {<text>class="error-label"</text>}>child pnr YYYYMMDDXXXX</label>
                    <input type="text" id="input_childpnr" 
                        name="regval_childpnr"  
                        @Validation.For("regval_childnr") />
                    <button name="regsubmit" value="child" >register</button>
                    @Html.ValidationMessage("regval_childpnr")
                </form>
                break;
            default:
                // display choice menu of register types
                <form action="~/Employee">
                    <button id="btn_self" name="regtype" value="self">register self</button>
                    <button id="btn_child" name="regtype" value="child">register child</button>
                </form>
                break;
        }

    }

</div>
